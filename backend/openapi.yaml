openapi: 3.0.0
info:
  title: Social Media API
  version: "1.0"
  description: >
    A RESTful API for a social media platform supporting users, posts, comments,
    likes, and profile management.
servers:
  - url: https://saharamexico-memphisski-3001.codio-box.uk
paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  _links:
                    type: object
        '400':
          description: Bad Request - missing or invalid fields
  /login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                  refreshToken:
                    type: string
                  _links:
                    type: object
        '401':
          description: Invalid credentials
  /refresh-token:
    post:
      summary: Refresh access token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                  _links:
                    type: object
        '401':
          description: Invalid or missing refresh token
  /profile:
    get:
      summary: Get current user's profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          description: Not authenticated
    put:
      summary: Update current user's profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/Profile'
  /user/posts:
    post:
      summary: Create a new post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
  /posts:
    get:
      summary: Get public feed of posts
      security:
        - bearerAuth: []  # optional â€“ used to compute liked flag if token provided
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/PostResponse'
  /posts/{id}:
    get:
      summary: Get a single post by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '404':
          description: Post not found
  /user/posts/{id}/like:
    put:
      summary: Toggle like for a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the post to toggle like
      responses:
        '200':
          description: Like toggled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  post:
                    $ref: '#/components/schemas/PostResponse'
                  liked:
                    type: boolean
                  _links:
                    type: object
        '401':
          description: Authentication required
  /user/posts/{id}:
    delete:
      summary: Delete a post (owner or admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  _links:
                    type: object
        '403':
          description: Not authorized
  /user/posts/{postId}/comments:
    post:
      summary: Add a comment to a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
    get:
      summary: Get comments for a post
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/CommentResponse'
  /user/posts/{postId}/comments/{id}:
    put:
      summary: Update a comment
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: integer
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  _links:
                    type: object
        '403':
          description: Not authorized
    delete:
      summary: Delete a comment
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: integer
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  _links:
                    type: object
        '403':
          description: Not authorized
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        profilePic:
          type: string
          format: uri
    Login:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    Register:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
    Profile:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        profilePic:
          type: string
          format: uri
    ProfileUpdate:
      type: object
      properties:
        username:
          type: string
        profilePic:
          type: string
          format: uri
    Post:
      type: object
      required:
        - content
      properties:
        content:
          type: string
    PostResponse:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        content:
          type: string
        likes:
          type: integer
        username:
          type: string
        profilePic:
          type: string
          format: uri
        liked:
          type: boolean
        _links:
          type: object
    Comment:
      type: object
      required:
        - content
      properties:
        content:
          type: string
    CommentResponse:
      type: object
      properties:
        id:
          type: integer
        post_id:
          type: integer
        user_id:
          type: integer
        content:
          type: string
        username:
          type: string
        profilePic:
          type: string
          format: uri
        _links:
          type: object
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

# documentation here was inspired by :
    # https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Getting-started
